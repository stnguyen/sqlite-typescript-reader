import { describe, expect, test } from "bun:test";
import { Database, _testing } from "../app/database";

describe("sample.db", async () => {
  const DB_PATH = "tests/sample.db";

  test("read header on open", async () => {
    const db = await Database.open(DB_PATH);
    expect(db.header).toBeObject();
    expect(db.header.pageSize).toEqual(4096);
    db.close();
  })

  test("read page 1", async () => {
    const db = await Database.open(DB_PATH);
    const p1 = await db.readPage(1);

    expect(p1).toBeObject();
    expect(p1.header.pageType).toEqual(_testing.PageType.LeafTable);

    db.close();
  })

  test("count tables", async () => {
    const db = await Database.open(DB_PATH);
    expect(await db.countTables()).toEqual(3);
    db.close();
  })

  test("get table names", async () => {
    const db = await Database.open(DB_PATH);
    const names = await db.getTableNames();
    expect(names).toEqual(["apples", "oranges"]);
    db.close();
  })

  test("count rows", async () => {
    const db = await Database.open(DB_PATH);
    expect(await db.countTableRows("apples")).toEqual(4);
    expect(await db.countTableRows("oranges")).toEqual(6);

    try {
      await db.countTableRows("notExist");
    } catch (error) {
      expect((error as any).message).toEqual("No such schema: notExist")
    }
    db.close();
  })

  test("get single column values", async () => {
    const db = await Database.open(DB_PATH);
    const values = await db.select("apples", ["name"]);
    expect(values.sort()).toEqual([["Fuji"], ["Golden Delicious"], ["Granny Smith"], ["Honeycrisp"]]);
    try {
      await db.select("apples", ["notExist"]);
    } catch (error) {
      expect((error as any).message).toEqual("No such column: notExist")
    }
    db.close();
  })

  test("get multi column values", async () => {
    const db = await Database.open(DB_PATH);
    const values = await db.select("apples", ["name", "color"]);
    expect(values.sort()).toEqual([["Fuji", "Red"], ["Golden Delicious", "Yellow"], ["Granny Smith", "Light Green"], ["Honeycrisp", "Blush Red"]]);
    try {
      await db.select("apples", ["name", "notExist"]);
    } catch (error) {
      expect((error as any).message).toEqual("No such column: notExist")
    }
    db.close();
  })

  test("get multi column values with where clause", async () => {
    const db = await Database.open(DB_PATH);
    const values = await db.select("apples", ["name", "color"], { column: "color", operator: "=", value: "Yellow" });
    expect(values.sort()).toEqual([["Golden Delicious", "Yellow"]]);
    db.close();
  })

  test("get multi column valuesm, one column is integer primary key", async () => {
    const db = await Database.open(DB_PATH);
    const values = await db.select("apples", ["name", "color", "id"]);
    expect(values.sort()).toEqual([["Fuji", "Red", 2], ["Golden Delicious", "Yellow", 4], ["Granny Smith", "Light Green", 1], ["Honeycrisp", "Blush Red", 3]]);
    db.close();
  })
})

describe("companies.db", async () => {
  const DB_PATH = "tests/companies.db";

  test("find index", async () => {
    const db = await Database.open(DB_PATH);

    let index = await db.findIndex("companies", "nonExistColumn");
    expect(index).toBeUndefined();

    index = await db.findIndex("nonExistTable", "country");
    expect(index).toBeUndefined();

    index = await db.findIndex("companies", "country");
    expect(index).toBeDefined();
    expect(index!.name).toEqual("idx_companies_country");

    db.close();
  })

  test("search index são tomé and príncipe", async () => {
    const db = await Database.open(DB_PATH);

    const indexSchema = await db.findIndex("companies", "country");
    const rowids = await db.searchIndex(indexSchema!.rootPage, "são tomé and príncipe");
    expect(rowids).toEqual([
      2008667,
      2029528,
      2537559,
      2553992,
      3519013,
      3891414,
      4034222,
      4301186,
      4383674,
      4733849,
      5549755,
      6094078,
      6424198,
      6741320,
    ])

    db.close();
  })

  test("search index montserrat", async () => {
    const db = await Database.open(DB_PATH);

    const indexSchema = await db.findIndex("companies", "country");
    const rowids = await db.searchIndex(indexSchema!.rootPage, "montserrat");
    expect(rowids).toEqual([
      288999,
      4472846,
      5316703
    ])

    db.close();
  })

  test("search index dominican republic", async () => {
    const db = await Database.open(DB_PATH);

    const indexSchema = await db.findIndex("companies", "country");
    const rowids = await db.searchIndex(indexSchema!.rootPage, "dominican republic");
    expect(rowids).toEqual([
      1282, 1619, 7890, 14100, 22122, 30618, 34641, 39361, 42267, 49874, 50042, 56513, 58130, 59340, 62288, 65127, 68706, 69001, 69855, 70670, 89917, 92243, 97307, 97745, 99323, 100659, 101484, 102249, 104120, 107736, 119014, 123111, 124081, 125729, 127349, 131721, 133357, 136290, 140007, 140380, 141153, 145974, 150911, 160007, 169128, 179487, 180973, 182798, 185097, 189781, 206168, 208902, 210459, 212355, 212486, 218718, 220107, 228201, 228579, 230224, 233429, 235558, 236703, 243757, 244067, 244109, 246608, 249195, 253222, 257794, 258590, 262391, 268507, 268877, 270551, 281422, 287408, 291098, 292402, 292420, 296325, 299377, 303242, 305308, 306808, 307360, 319334, 323090, 329870, 330579, 337963, 339853, 343588, 345263, 345664, 346012, 348349, 349625, 350674, 352477, 355416, 377602, 381492, 391066, 396379, 405310, 408602, 413547, 414156, 423162, 423274, 436145, 437356, 437677, 441011, 447312, 453577, 455740, 457368, 463126, 464856, 472557, 496375, 498684, 506151, 506380, 509746, 511571, 516133, 518577, 520155, 528297, 529208, 532585, 547443, 549129, 564738, 567215, 570137, 570914, 573999, 575315, 581686, 584745, 585211, 586694, 588346, 595372, 596112, 602323, 605127, 605391, 605832, 607705, 608795, 612165, 618559, 621260, 624571, 643300, 644875, 645088, 646220, 648184, 670611, 676354, 678835, 680539, 690249, 691499, 695242, 695845, 703963, 708268, 717542, 717624, 718058, 718590, 719157, 720977, 724732, 733993, 735774, 735881, 736164, 737084, 737995, 738140, 740189, 741782, 743328, 745117, 746406, 751809, 756098, 759634, 760215, 763235, 781952, 790174, 790335, 794557, 795122, 800863, 805339, 810742, 813092, 819295, 822807, 823541, 824925, 829102, 833660, 837374, 838084, 841665, 848355, 850730, 851709, 856067, 863265, 864592, 866537, 872005, 872042, 875229, 884993, 897608, 904234, 910765, 914302, 916957, 920086, 926548, 930073, 934657, 934681, 943695, 951539, 958180, 978688, 981065, 981302, 981405, 996029, 999072, 1005519, 1008224, 1013151, 1014506, 1015215, 1019610, 1024770, 1031990, 1032597, 1034191, 1034982, 1050636, 1052795, 1052989, 1053506, 1059331, 1060772, 1061857, 1062487, 1063922, 1070605, 1074590, 1076647, 1079895, 1090961, 1091751, 1092402, 1095907, 1095994, 1096278, 1097497, 1101424, 1105793, 1116200, 1122551, 1125538, 1126157, 1129264, 1133845, 1159828, 1166424, 1168574, 1171605, 1172684, 1173444, 1174368, 1176011, 1177831, 1179306, 1179694, 1192056, 1192291, 1195911, 1195992, 1198288, 1204256, 1207008, 1210030, 1212421, 1213067, 1216376, 1220831, 1231635, 1234770, 1239492, 1240992, 1241524, 1245353, 1246272, 1255797, 1261349, 1267595, 1279541, 1280584, 1282131, 1288921, 1294299, 1298781, 1303996, 1313795, 1314880, 1316195, 1320438, 1322566, 1324049, 1329797, 1330505, 1338032, 1340393, 1340677, 1341573, 1342286, 1348925, 1355864, 1362758, 1363805, 1370167, 1370271, 1376700, 1380623, 1386489, 1387172, 1391900, 1392361, 1393083, 1396150, 1401334, 1404065, 1408232, 1413633, 1419890, 1426160, 1428656, 1430765, 1437890, 1440380, 1447011, 1447363, 1452779, 1460720, 1464226, 1464937, 1467440, 1480780, 1481161, 1481990, 1491555, 1495546, 1496907, 1509666, 1510636, 1511226, 1533979, 1534017, 1534609, 1535820, 1537572, 1539921, 1542282, 1548487, 1555262, 1555299, 1558331, 1558696, 1564956, 1566279, 1583217, 1584254, 1588386, 1597345, 1598408, 1604244, 1612748, 1615821, 1616273, 1619410, 1627471, 1632736, 1633071, 1636706, 1636842, 1639913, 1645323, 1648973, 1649967, 1654751, 1655428, 1657256, 1662428, 1667202, 1668960, 1672149, 1687135, 1689658, 1693550, 1695807, 1700004, 1702165, 1704882, 1710295, 1718953, 1723399, 1731012, 1733318, 1737834, 1741420, 1744074, 1756047, 1757598, 1759010, 1759905, 1773066, 1780507, 1787027, 1789082, 1789277, 1794750, 1796391, 1798512, 1806382, 1809385, 1810492, 1811712, 1812961, 1816226, 1817869, 1823976, 1824887, 1827481, 1828892, 1834326, 1835728, 1837188, 1838641, 1851164, 1860576, 1863230, 1885896, 1891075, 1891790, 1892765, 1895291, 1898213, 1900408, 1902192, 1902485, 1906276, 1906463, 1909252, 1913595, 1916660, 1917201, 1917866, 1918374, 1918691, 1918860, 1920600, 1922633, 1931262, 1934034, 1934331, 1939470, 1944749, 1947648, 1961270, 1961463, 1966374, 1966651, 1972997, 1974494, 1979481, 1982755, 1987285, 1988716, 1993453, 1998701, 2006559, 2011832, 2015719, 2016728, 2017037, 2017740, 2026679, 2032545, 2037353, 2040765, 2041915, 2043007, 2048953, 2063560, 2063747, 2064046, 2066843, 2069940, 2076630, 2077839, 2081040, 2081720, 2082624, 2085249, 2088426, 2091403, 2095558, 2106363, 2107018, 2108164, 2110949, 2118897, 2118944, 2119235, 2124739, 2125279, 2142029, 2147949, 2159778, 2163035, 2165411, 2174779, 2186519, 2192564, 2194311, 2199607, 2201250, 2207469, 2216259, 2221724, 2222936, 2223271, 2229452, 2230057, 2247561, 2250872, 2251177, 2255858, 2261977, 2264381, 2264592, 2267497, 2267840, 2284371, 2285712, 2287115, 2287321, 2294252, 2306936, 2308853, 2311738, 2315618, 2322753, 2330317, 2337198, 2337236, 2339597, 2346478, 2346772, 2348498, 2348534, 2352956, 2353624, 2354521, 2358536, 2358809, 2360662, 2362569, 2363032, 2365600, 2367381, 2369030, 2369798, 2372015, 2372374, 2373942, 2375907, 2376028, 2376413, 2383997, 2387340, 2394006, 2397450, 2405754, 2407407, 2411592, 2416700, 2422212, 2422285, 2422420, 2425870, 2429148, 2429483, 2429651, 2430127, 2431078, 2436975, 2440153, 2440672, 2440755, 2447959, 2460111, 2465505, 2468775, 2484308, 2486359, 2494420, 2496537, 2497893, 2506432, 2510028, 2514390, 2517150, 2517444, 2526490, 2530352, 2540402, 2550400, 2554651, 2555467, 2556203, 2556453, 2556545, 2558145, 2564049, 2569039, 2569361, 2569819, 2571308, 2577892, 2578825, 2587527, 2592655, 2593911, 2594401, 2598838, 2599030, 2600235, 2600249, 2605792, 2616562, 2616798, 2622890, 2622908, 2632524, 2637140, 2638731, 2645886, 2658547, 2662559, 2663811, 2664109, 2666936, 2671523, 2672071, 2684564, 2686493, 2690374, 2690915, 2692333, 2698200, 2708420, 2712157, 2712349, 2716400, 2716537, 2719328, 2726174, 2728385, 2728604, 2730005, 2730867, 2731673, 2740991, 2747446, 2756769, 2760972, 2763909, 2770311, 2771562, 2772317, 2772866, 2778308, 2779984, 2782664, 2785555, 2785833, 2796952, 2800637, 2815369, 2822293, 2825105, 2827472, 2828626, 2829822, 2831094, 2833003, 2833195, 2846595, 2847918, 2848788, 2855467, 2858001, 2861854, 2866779, 2869841, 2871010, 2871080, 2878513, 2881423, 2884075, 2884591, 2888992, 2891707, 2896026, 2896496, 2898007, 2899502, 2905299, 2909844, 2917271, 2920158, 2930183, 2932100, 2940961, 2941267, 2941445, 2942238, 2945389, 2948824, 2953152, 2957987, 2967128, 2978339, 2982497, 2984058, 2986843, 2989010, 2993807, 2997403, 2998001, 2998157, 3006818, 3010239, 3011650, 3012336, 3013192, 3014326, 3019565, 3019568, 3022112, 3026402, 3031741, 3035482, 3040083, 3041309, 3043569, 3052000, 3056326, 3061140, 3061683, 3063990, 3064892, 3065113, 3065477, 3066282, 3066362, 3068888, 3073936, 3074290, 3074596, 3075970, 3076442, 3079874, 3080385, 3082359, 3084071, 3092033, 3094846, 3096523, 3111798, 3112001, 3114990, 3122167, 3125416, 3125884, 3132973, 3136927, 3141836, 3143328, 3144554, 3145974, 3150674, 3166029, 3176303, 3182122, 3183766, 3200389, 3212688, 3215537, 3221576, 3230915, 3238393, 3249208, 3258218, 3260008, 3260308, 3268984, 3280735, 3281292, 3281860, 3286472, 3290218, 3303886, 3314525, 3323244, 3325383, 3326960, 3329198, 3336217, 3336913, 3338098, 3342472, 3358597, 3366925, 3367090, 3371615, 3373099, 3375226, 3387024, 3393030, 3398903, 3400083, 3401655, 3406502, 3412573, 3419772, 3425778, 3430807, 3431606, 3432863, 3443871, 3446091, 3446396, 3451128, 3454259, 3457225, 3462478, 3463198, 3470812, 3479672, 3481127, 3481645, 3482872, 3489110, 3490110, 3493185, 3494980, 3495307, 3499203, 3511713, 3512205, 3512878, 3514586, 3523126, 3534997, 3536429, 3545041, 3545468, 3545635, 3551158, 3552617, 3554490, 3556103, 3565170, 3566250, 3569800, 3570582, 3573781, 3576845, 3582305, 3588830, 3594849, 3594885, 3594939, 3596801, 3597253, 3599383, 3603229, 3606033, 3611388, 3611912, 3617324, 3623696, 3649365, 3655299, 3660199, 3666573, 3670553, 3677419, 3684929, 3686163, 3686826, 3687051, 3687885, 3692192, 3693427, 3708952, 3709323, 3711557, 3718800, 3722675, 3725100, 3727698, 3731133, 3732744, 3735364, 3739303, 3742044, 3744359, 3748359, 3749897, 3751576, 3754842, 3755094, 3756534, 3761900, 3766529, 3776709, 3777766, 3778882, 3783853, 3784282, 3784378, 3786245, 3787542, 3788268, 3788677, 3805394, 3805894, 3806041, 3809777, 3810821, 3812000, 3812065, 3818597, 3823068, 3824772, 3825812, 3837431, 3837507, 3848510, 3850329, 3856119, 3860839, 3868589, 3875460, 3887244, 3893083, 3896005, 3897343, 3898985, 3899670, 3908893, 3930548, 3931059, 3941784, 3942471, 3944457, 3945024, 3955572, 3956704, 3963991, 3968059, 3968662, 3971714, 3973931, 3982964, 3985309, 3985782, 3989348, 3989872, 3990132, 3993016, 4007559, 4009078, 4014779, 4016165, 4020725, 4023848, 4026300, 4031313, 4037163, 4047101, 4052233, 4052854, 4058920, 4064935, 4066823, 4079626, 4081225, 4081416, 4081682, 4083438, 4087184, 4090794, 4097962, 4103758, 4108346, 4108360, 4110733, 4112169, 4113323, 4114728, 4119350, 4121154, 4126990, 4129165, 4130404, 4132463, 4133897, 4135293, 4138513, 4148629, 4152689, 4153186, 4154597, 4156251, 4161623, 4169514, 4173848, 4177697, 4181719, 4184800, 4190211, 4195412, 4197432, 4200137, 4208422, 4213292, 4213679, 4220201, 4221248, 4225221, 4234474, 4234840, 4235941, 4242829, 4247311, 4249003, 4249379, 4249797, 4252519, 4260177, 4260710, 4261769, 4265855, 4276643, 4276996, 4277117, 4281562, 4282592, 4284664, 4293861, 4299774, 4300505, 4309827, 4313027, 4314112, 4317680, 4317855, 4318338, 4318374, 4319271, 4323618, 4330052, 4334434, 4341948, 4348175, 4352561, 4358553, 4359037, 4368755, 4373964, 4375013, 4377522, 4379089, 4381331, 4383357, 4400603, 4403113, 4406530, 4406913, 4407434, 4411635, 4415659, 4418419, 4423411, 4427258, 4428960, 4431136, 4437411, 4438291, 4439417, 4445568, 4449779, 4454466, 4456140, 4457398, 4460723, 4462143, 4462185, 4466025, 4468026, 4469881, 4470387, 4470426, 4474647, 4476105, 4477105, 4479762, 4483153, 4486089, 4486392, 4487580, 4489601, 4493006, 4493748, 4498951, 4501769, 4503008, 4513996, 4517422, 4522974, 4527851, 4529088, 4529373, 4529558, 4529908, 4545249, 4549677, 4551847, 4569964, 4572771, 4574317, 4574721, 4576628, 4594272, 4595568, 4603391, 4605396, 4608360, 4609968, 4610212, 4616215, 4619830, 4621113, 4621446, 4621565, 4624954, 4631157, 4642440, 4649104, 4652396, 4654332, 4654847, 4660296, 4661599, 4664668, 4667909, 4669534, 4674113, 4675817, 4680278, 4685843, 4692946, 4694754, 4699144, 4701602, 4704634, 4705104, 4710173, 4715528, 4720697, 4727278, 4727834, 4728250, 4728496, 4728876, 4728935, 4729861, 4729873, 4729994, 4730749, 4731599, 4733655, 4735502, 4738974, 4739660, 4745305, 4745636, 4757820, 4759941, 4763658, 4766108, 4772513, 4775740, 4791361, 4792159, 4793339, 4795049, 4803644, 4807796, 4809625, 4810744, 4816138, 4817663, 4826332, 4827612, 4830416, 4833582, 4836820, 4836854, 4839302, 4839549, 4849955, 4855345, 4856394, 4858648, 4860897, 4860915, 4862853, 4869255, 4869589, 4873725, 4876694, 4890071, 4890162, 4894897, 4897552, 4897975, 4902644, 4902788, 4906421, 4911000, 4913834, 4914203, 4917780, 4917784, 4921335, 4921514, 4928847, 4930710, 4938250, 4942676, 4944059, 4946370, 4950582, 4957777, 4962769, 4970217, 4975172, 4977888, 4978993, 4984624, 4987138, 4991112, 4991118, 4992149, 4994587, 4996569, 5013932, 5015895, 5022085, 5024368, 5025085, 5033662, 5034593, 5041921, 5047590, 5047598, 5049383, 5061548, 5063109, 5066331, 5070171, 5073425, 5077966, 5084009, 5086447, 5088360, 5089918, 5090921, 5095243, 5095972, 5097872, 5100814, 5107485, 5113107, 5120361, 5125714, 5126694, 5129994, 5140553, 5142036, 5143245, 5143433, 5144187, 5145548, 5152540, 5156154, 5161807, 5169913, 5172425, 5173046, 5178719, 5181311, 5183085, 5183602, 5184827, 5186400, 5187251, 5193335, 5200306, 5207232, 5209144, 5209587, 5215209, 5215274, 5218734, 5220042, 5227874, 5227937, 5232701, 5232899, 5236924, 5237542, 5238804, 5244642, 5251798, 5251905, 5254167, 5258733, 5262104, 5262794, 5268213, 5269352, 5275348, 5281700, 5282879, 5282953, 5283332, 5285891, 5287494, 5288571, 5290191, 5292336, 5303598, 5307395, 5311517, 5313164, 5314290, 5324889, 5325099, 5325677, 5331185, 5335818, 5337837, 5338461, 5353767, 5355225, 5355445, 5361151, 5368722, 5370125, 5372439, 5375706, 5378608, 5380290, 5382554, 5384279, 5390819, 5398539, 5398887, 5402694, 5411417, 5411516, 5421990, 5425372, 5425486, 5425893, 5426805, 5427953, 5439019, 5439781, 5443739, 5446668, 5451041, 5451936, 5463984, 5470359, 5472559, 5474709, 5476059, 5478122, 5479066, 5480421, 5483814, 5484880, 5485727, 5489648, 5491587, 5492038, 5498537, 5500118, 5501331, 5509394, 5509431, 5510072, 5517470, 5521074, 5523233, 5529548, 5531229, 5538021, 5538101, 5546599, 5550296, 5553713, 5563241, 5563548, 5566575, 5571297, 5573420, 5575977, 5577794, 5599893, 5600276, 5600384, 5603175, 5607372, 5610394, 5613391, 5619757, 5626342, 5627202, 5633057, 5640774, 5641417, 5644192, 5646064, 5651700, 5656355, 5657900, 5658153, 5666093, 5673450, 5675887, 5677468, 5687133, 5701042, 5705715, 5710103, 5710112, 5717582, 5718364, 5730531, 5730770, 5731569, 5732488, 5735258, 5741263, 5743526, 5760148, 5772263, 5772306, 5773163, 5773725, 5779777, 5782283, 5782549, 5786546, 5788142, 5788530, 5792046, 5792988, 5795916, 5798051, 5802381, 5807054, 5813760, 5819948, 5823490, 5836097, 5837036, 5838696, 5846499, 5847372, 5847710, 5848745, 5849197, 5853117, 5853453, 5858388, 5860213, 5864009, 5865173, 5868290, 5869086, 5871564, 5875958, 5880495, 5886307, 5887642, 5887708, 5889403, 5895304, 5897563, 5898162, 5898370, 5901811, 5916047, 5922462, 5925438, 5925758, 5927277, 5933735, 5934020, 5942290, 5942518, 5946610, 5947934, 5948557, 5949537, 5951172, 5952341, 5953156, 5953490, 5958311, 5959382, 5961258, 5962368, 5967980, 5971546, 5972827, 5974639, 5975514, 5981832, 5992435, 5993503, 5996438, 5996641, 5999237, 6001773, 6003978, 6012806, 6012897, 6013407, 6013620, 6015403, 6015453, 6018333, 6028949, 6032039, 6036638, 6049802, 6051086, 6052207, 6052976, 6053129, 6056377, 6077643, 6085514, 6085711, 6088537, 6090258, 6101153, 6101222, 6117268, 6121937, 6133491, 6135758, 6139005, 6139267, 6141367, 6141491, 6143135, 6148292, 6148943, 6149924, 6165486, 6166760, 6169402, 6180706, 6184185, 6186127, 6196617, 6207016, 6209371, 6212176, 6217709, 6226152, 6238570, 6240558, 6244879, 6248645, 6251513, 6253037, 6253768, 6268621, 6283765, 6284692, 6284747, 6287116, 6287718, 6290825, 6293497, 6297499, 6298859, 6299502, 6299621, 6305280, 6305482, 6313496, 6313619, 6320829, 6321360, 6321556, 6322150, 6325069, 6328344, 6341076, 6343554, 6343653, 6348186, 6351758, 6352947, 6354981, 6363817, 6366358, 6367128, 6369607, 6375090, 6377214, 6381751, 6385590, 6386324, 6389874, 6396340, 6397100, 6397332, 6401456, 6411810, 6414518, 6422530, 6427993, 6430718, 6432072, 6439160, 6441771, 6444706, 6446783, 6446843, 6451750, 6456753, 6458125, 6459616, 6461348, 6466356, 6466936, 6468379, 6484000, 6488550, 6490086, 6490520, 6496355, 6498956, 6499099, 6500376, 6500428, 6511546, 6513200, 6515434, 6530600, 6531236, 6531869, 6540870, 6550914, 6552403, 6571858, 6574377, 6579133, 6584374, 6587868, 6589221, 6592005, 6609181, 6613811, 6617247, 6618682, 6623841, 6624452, 6625796, 6626670, 6629828, 6633152, 6637247, 6656378, 6660527, 6667590, 6669847, 6671519, 6675646, 6678012, 6678443, 6692162, 6692812, 6696386, 6698780, 6701927, 6703971, 6704561, 6706072, 6706265, 6710966, 6715537, 6732077, 6732583, 6733543, 6733631, 6734460, 6734853, 6736008, 6736859, 6738878, 6745600, 6750379, 6750397, 6761106, 6763682, 6769723, 6770597, 6771126, 6774499, 6776865, 6776939, 6787752, 6791905, 6794856, 6795669, 6804309, 6804401, 6806227, 6812949, 6815970, 6818133, 6818242, 6823531, 6828679, 6829727, 6838039, 6840946, 6842285, 6843064, 6845703, 6847515, 6853639, 6857912, 6858648, 6859218, 6865176, 6867341, 6871461, 6873689, 6874244, 6876501, 6879688, 6893733, 6898581, 6899059, 6901595, 6903339, 6903985, 6904599, 6906992, 6914644, 6917090, 6920381, 6925092, 6927789, 6930181, 6931997, 6935128, 6941202, 6942112, 6944521, 6948909, 6960395, 6960701, 6963680, 6963783, 6964422, 6965122, 6971868, 6976638, 6977512, 6982179, 6988386, 6995879, 6996227, 7002151, 7007104, 7020927, 7023588, 7026139, 7034290, 7034322, 7039648, 7041911, 7042970, 7051834, 7055880, 7057385, 7070446, 7071839, 7073369, 7080399, 7083914, 7084144, 7085774, 7085965, 7087207, 7088111, 7089459, 7091068, 7096590, 7104608, 7107934, 7108723, 7110113, 7110219, 7112069, 7112314, 7114206, 7116521, 7118289, 7127790, 7128448, 7128803, 7132277, 7147030, 7150027, 7155067, 7158127, 7158960, 7165620, 7165885, 7166530, 7169871
    ])
    db.close();
  })

  test("get multi column values with where clause", async () => {
    const db = await Database.open(DB_PATH);
    const values = await db.select("companies", ["id", "name"], { column: "country", operator: "=", value: "montserrat" });
    expect(values.sort()).toEqual([[288999, "government of montserrat"], [4472846, "university of science, arts & technology"], [5316703, "the abella group llc"]]);
    db.close();
  })
})

describe("Chinook_Sqlite.sqlite", async () => {
  const DB_PATH = "tests/Chinook_Sqlite.sqlite";

  test("read page 1", async () => {
    const db = await Database.open(DB_PATH);
    const p1 = await db.readPage(1);

    expect(p1).toBeObject();
    expect(p1.header.pageType).toEqual(_testing.PageType.InteriorTable);

    db.close();
  })

  test("count tables", async () => {
    const db = await Database.open(DB_PATH);
    expect(await db.countTables()).toEqual(11);
    db.close();
  })

  test("get table names", async () => {
    const db = await Database.open(DB_PATH);
    const names = await db.getTableNames();
    expect(names).toEqual([
      "Album", "Artist", "Customer", "Employee", "Genre", "Invoice", "InvoiceLine", "MediaType", "Playlist",
      "PlaylistTrack", "Track"
    ]);
    db.close();
  })

  test("count rows", async () => {
    const db = await Database.open(DB_PATH);
    expect(await db.countTableRows("Customer")).toEqual(59);
    expect(await db.countTableRows("Track")).toEqual(3503);
    db.close();
  })

  test("get single column values", async () => {
    const db = await Database.open(DB_PATH);
    const values = await db.select("Customer", ["FirstName"]);
    expect(values.sort()).toEqual([["Aaron"], ["Alexandre"], ["Astrid"], ["Bjørn"], ["Camille"], ["Daan"], ["Dan"], ["Diego"], ["Dominique"], ["Eduardo"], ["Edward"], ["Ellie"], ["Emma"], ["Enrique"], ["Fernanda"], ["Frank"], ["Frank"], ["František"], ["François"], ["Fynn"], ["Hannah"], ["Heather"], ["Helena"], ["Hugh"], ["Isabelle"], ["Jack"], ["Jennifer"], ["Joakim"], ["Johannes"], ["John"], ["João"], ["Julia"], ["Kara"], ["Kathy"], ["Ladislav"], ["Leonie"], ["Lucas"], ["Luis"], ["Luís"], ["Madalena"], ["Manoj"], ["Marc"], ["Mark"], ["Mark"], ["Martha"], ["Michelle"], ["Niklas"], ["Patrick"], ["Phil"], ["Puja"], ["Richard"], ["Robert"], ["Roberto"], ["Stanisław"], ["Steve"], ["Terhi"], ["Tim"], ["Victor"], ["Wyatt"]]);
    db.close();
  })


  test("get single column values", async () => {
    const db = await Database.open(DB_PATH);
    const values = await db.select("Customer", ["FirstName", "LastName"]);
    expect(values.sort()).toEqual([
      ["Aaron", "Mitchell"],
      ["Alexandre", "Rocha"],
      ["Astrid", "Gruber"],
      ["Bjørn", "Hansen"],
      ["Camille", "Bernard"],
      ["Daan", "Peeters"],
      ["Dan", "Miller"],
      ["Diego", "Gutiérrez"],
      ["Dominique", "Lefebvre"],
      ["Eduardo", "Martins"],
      ["Edward", "Francis"],
      ["Ellie", "Sullivan"],
      ["Emma", "Jones"],
      ["Enrique", "Muñoz"],
      ["Fernanda", "Ramos"],
      ["Frank", "Harris"],
      ["Frank", "Ralston"],
      ["František", "Wichterlová"],
      ["François", "Tremblay"],
      ["Fynn", "Zimmermann"],
      ["Hannah", "Schneider"],
      ["Heather", "Leacock"],
      ["Helena", "Holý"],
      ["Hugh", "O'Reilly"],
      ["Isabelle", "Mercier"],
      ["Jack", "Smith"],
      ["Jennifer", "Peterson"],
      ["Joakim", "Johansson"],
      ["Johannes", "Van der Berg"],
      ["John", "Gordon"],
      ["João", "Fernandes"],
      ["Julia", "Barnett"],
      ["Kara", "Nielsen"],
      ["Kathy", "Chase"],
      ["Ladislav", "Kovács"],
      ["Leonie", "Köhler"],
      ["Lucas", "Mancini"],
      ["Luis", "Rojas"],
      ["Luís", "Gonçalves"],
      ["Madalena", "Sampaio"],
      ["Manoj", "Pareek"],
      ["Marc", "Dubois"],
      ["Mark", "Philips"],
      ["Mark", "Taylor"],
      ["Martha", "Silk"],
      ["Michelle", "Brooks"],
      ["Niklas", "Schröder"],
      ["Patrick", "Gray"],
      ["Phil", "Hughes"],
      ["Puja", "Srivastava"],
      ["Richard", "Cunningham"],
      ["Robert", "Brown"],
      ["Roberto", "Almeida"],
      ["Stanisław", "Wójcik"],
      ["Steve", "Murray"],
      ["Terhi", "Hämäläinen"],
      ["Tim", "Goyer"],
      ["Victor", "Stevens"],
      ["Wyatt", "Girard"]
    ]);
    db.close();
  })
})
